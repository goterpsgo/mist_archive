{
  "name": "rcloader",
  "version": "0.2.2",
  "description": "For build system plugins that need to fetch relative config files (like .jshintrc).",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:spenceralger/rcloader.git"
  },
  "keywords": [
    "find",
    "rcfile",
    "rc",
    "search",
    "defaults",
    "config"
  ],
  "author": {
    "name": "Spencer Alger"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/spenceralger/rcloader/issues"
  },
  "homepage": "https://github.com/spenceralger/rcloader",
  "dependencies": {
    "lodash.assign": "^4.2.0",
    "lodash.isobject": "^3.0.2",
    "lodash.merge": "^4.6.0",
    "rcfinder": "^0.1.6"
  },
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "^4.6.2"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "readme": "# rcloader\n\n[![Travis CI](https://travis-ci.org/spalger/rcloader.svg)](https://travis-ci.org/spalger/rcloader)\n\nFor build system plugins that need to fetch relative config files (like .jshintrc).\n\n## Features\n  - Find the closest config file (like .jshintrc) relative to the file you are linting\n  - Lookups are cached to limit IO operations\n  - Accepts input directly from plugin consumers to\n    - specifiy a file that should always be used\n    - specify a default file\n    - specify overrides\n    - disable file lookup\n\n## Install\n```sh\nnpm install rcloader\n```\n\n## Use\nThis plugin was written to specifically address this issue for a couple of gulp plugins.\n\n### within a gulp plugin\n```js\nvar RcLoader = require('rcloader');\nvar map = require('map-stream');\n\nmodule.exports = function MyGulpPlugin(options) {\n  var rcLoader = new RcLoader('.configfilename', options);\n\n  return map(function (file, cb) {\n    // get the options for this file specifically\n    rcLoader.for(file.path, function (err, fileOpts) {\n      // do something cool\n\n      // send the file along\n      cb(null, file);\n    });\n  });\n};\n```\n\nIf you would rather, just skip the callback and it will run synchronously.\n```js\nvar fileOpts = rcLoader.for(file.path, options);\n```\n\n## Options\nThe second argument to the `RcLoader` constructor should be the options that plugin consumers define, and it can take a few different forms.\n\n**If the user specifies a string**, it is used as a path to the only config file that they care about. Calling `rcLoader.for(path)` will always return a copy of the config file at that path.\n\n**If the user specifies an object**, the following keys will be stripped from it:\n\n- `lookup`, Boolean: Find the closest config file each time `.for()` is called. default is true, unless `options` is a path.\n- `defaultFile`, string: Specify a default configuration file.\n\nIf `defaultFile` is not specified, all values except `lookup` will override values found in the config file.\n",
  "readmeFilename": "README.md",
  "_id": "rcloader@0.2.2",
  "_from": "rcloader@^0.2.2"
}
